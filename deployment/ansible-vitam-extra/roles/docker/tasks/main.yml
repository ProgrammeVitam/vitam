---

# tasks file for mongo-express & elasticsearch-head

# Begin docker debian
- block:

  - name: supprimer le package docker fourni de base (obsol√®te et incompatible avec le package docker-ce)
    package:
      name: "docker"
      state: absent
    register: result
    retries: "{{ packages_install_retries_number }}"
    until: result is succeeded
    delay: "{{ packages_install_retries_delay }}"


  - name: Make sure curl is installed
    apt:
      name: curl
      state: present
    register: result
    retries: "{{ packages_install_retries_number }}"
    until: result is succeeded
    delay: "{{ packages_install_retries_delay }}"

  - name: add GPG docker repo key
    shell: "curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -"
    environment:
      https_proxy: "{{ http_proxy_environnement }}"
      http_proxy:  "{{ http_proxy_environnement }}"

  - name: install apt-transport-https as Docker repository is https
    package:
      name: apt-transport-https
      state: present
    register: result
    retries: "{{ packages_install_retries_number }}"
    until: result is succeeded
    delay: "{{ packages_install_retries_delay }}"

  - name: check docker repo are present
    apt_repository:
      repo: "{{ item }}"
      state: present
    loop:
      - "deb [arch=amd64] https://download.docker.com/linux/debian  {{ ansible_distribution_release }} stable"

  - name: run apt-update
    apt:
      update_cache: yes
    register: result
    retries: "{{ packages_install_retries_number }}"
    until: result is succeeded
    delay: "{{ packages_install_retries_delay }}"

  - name: installer docker & pip
    apt:
      name: ['docker-ce','python-pip']
      state: latest
    register: result
    retries: "{{ packages_install_retries_number }}"
    until: result is succeeded
    delay: "{{ packages_install_retries_delay }}"

  - name: upgrade pip & install docker python package
    pip:
      name: ['pip','docker']
      state: latest
    environment:
      http_proxy: "{{ http_proxy_environnement }}"
      https_proxy: "{{ http_proxy_environnement }}"
    when: http_proxy_environnement is defined and http_proxy_environnement != ""

  - name: upgrade pip & install docker python package
    pip:
      name: ['pip','docker']
      state: latest
    when: http_proxy_environnement is not defined or http_proxy_environnement == ""

  # - name: remove pip backports.ssl-match-hostname
  #   pip:
  #     name: "backports.ssl-match-hostname"
  #     state: absent

  - name: install python-backports.ssl-match-hostname
    apt:
      name: "python-backports.ssl-match-hostname"
      state: latest
    register: result
    retries: "{{ packages_install_retries_number }}"
    until: result is succeeded
    delay: "{{ packages_install_retries_delay }}"

  when: ansible_os_family == "Debian"
  # End docker debian

# Begin docker centos
- block:

  - name: installer le package docker
    package:
      name: ['docker','docker-python']
      state: latest
    register: result
    retries: "{{ packages_install_retries_number }}"
    until: result is succeeded
    delay: "{{ packages_install_retries_delay }}"

    # KWA : check if still useful with newer docker versions
  - name: Make sure net.ipv4.ip_forward is enabled (allow port-forwarding into docker containers)
    sysctl:
      name: net.ipv4.ip_forward
      sysctl_set: yes
      value: '1'

  when: ansible_os_family == "RedHat"
  # End docker centos


# OMA : add for unity
# KWA : check if really useful (potential security problem)
- name: create docker group
  group:
    name: docker
    gid: 1005
    state: present

# Cf. https://docs.docker.com/engine/admin/systemd/
- name: Ensure systemd docker service drop-in folder is there
  file:
    name: "/etc/systemd/system/docker.service.d"
    state: "directory"

# KWA : add root folders for data / conf / ... directories here ?
# KWA : configure docker login for repo

- name: Add http proxy conf for docker
  template:
    src: "http_proxy.conf.j2"
    dest: /etc/systemd/system/docker.service.d/http_proxy.conf
  notify:
   - restart docker
  when: http_proxy_environnement is defined

# Note : we force the restart here, as mongo-express must be restarted when mongodb is restarted...
# As this is development tools and not production assets, it's OK.
- name: Ensure docker daemon autostart && docker is started
  systemd:
    name: docker
    state: restarted
    daemon_reload: yes
    enabled: yes
