#!/bin/bash

# source global parameters
source /vitam/conf/restic/restic.conf

CONFIG_BACKUP_DIR=/vitam/conf/restic/conf.d

for FILE in ${CONFIG_BACKUP_DIR}/*.conf; do

  if [[ -f $FILE ]]; then

    # source backup parameters
    source $FILE

    CURRENT_BACKUP=${name}

    RESTIC_LOG_FILE=/vitam/log/restic/restic-${name}.log
    RESTIC_TMP_BACKUP_DIR=/vitam/tmp/restic/backup
    RESTIC_BACKUP_DIR=${RESTIC_TMP_BACKUP_DIR}/${CURRENT_BACKUP}

    RESTIC_RETENTION={{ restic.snapshot_retention | default(30) }}

    export RESTIC_REPOSITORY=${RESTIC_CONTAINER}/${CURRENT_BACKUP}

    [ ! -f "${RESTIC_LOG_FILE}" ] && touch "${RESTIC_LOG_FILE}"
    echo "################################################################################" |& tee -a ${RESTIC_LOG_FILE}
    echo "$(date +"%Y-%m-%d %T") - restic ${RESTIC_REPOSITORY}" |& tee -a ${RESTIC_LOG_FILE}

    # Check if the repo is already initialized before init
    if ([ -z "$(restic cat config)" ]) &>/dev/null; then
      echo "INFO: restic init ${CURRENT_BACKUP}" |& tee -a ${RESTIC_LOG_FILE}
      restic init |& tee -a ${RESTIC_LOG_FILE}
    fi

    if [[ "${type}" == "mongodb" ]]; then
      # Doc: http://www.programmevitam.fr/ressources/DocCourante/html/exploitation/topics/16-backup_restore.html#mongodb
      echo "INFO: mongodump ${CURRENT_BACKUP}" |& tee -a ${RESTIC_LOG_FILE}

      # Run mongodump on a specific ip instead of consul's name to avoid the following error
      # Failed: error writing data for collection `xxx` to disk: error reading collection: (CursorNotFound) Cursor not found (namespace: 'xxx', id: 1234).
      mongo_ip=$(host ${host%%:*})

      mongodump --host ${mongo_ip##* } --port ${host##*:} -u ${user} -p ${password} -o ${RESTIC_BACKUP_DIR} |& tee -a ${RESTIC_LOG_FILE}
    fi

    if [ $PIPESTATUS -eq 0 ]; then
      # restic backup
      echo "INFO: restic backup ${CURRENT_BACKUP}" |& tee -a ${RESTIC_LOG_FILE}
      restic backup ${RESTIC_BACKUP_DIR} |& tee -a ${RESTIC_LOG_FILE}

      # restic forget
      echo "INFO: restic forget ${CURRENT_BACKUP}" |& tee -a ${RESTIC_LOG_FILE}
      restic forget --keep-last ${RESTIC_RETENTION} |& tee -a ${RESTIC_LOG_FILE}

      # restic prune
      echo "INFO: restic prune ${CURRENT_BACKUP}" |& tee -a ${RESTIC_LOG_FILE}
      restic prune |& tee -a ${RESTIC_LOG_FILE}

    else
      echo "ERROR: Could not properly get backup. Canceling restic operations for ${CURRENT_BACKUP}..." |& tee -a ${RESTIC_LOG_FILE}
    fi

  fi

done