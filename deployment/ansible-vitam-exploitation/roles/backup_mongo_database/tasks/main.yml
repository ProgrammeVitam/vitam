---

- name: Ensure database backup dir {{ dabase_backup_dir }} is present
  file:
    path: "{{ dabase_backup_dir }}"
    state: directory
    owner: "{{ vitam_defaults.users.vitamdb }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.folder_permission }}"

- name: backup {{ database }} database
  shell: mongodump --host {{ ip_service }} --db "{{ database }}" --gzip --out "{{ dabase_backup_dir }}" --username={{ authentication.user }} --password={{ authentication.password }}
  run_once: true
  no_log: "{{ hide_passwords_during_deploy }}"
  delegate_to: "{{ groups['hosts_mongod_data']|first }}"

- name: ensure local {{ database }} backup can be stored
  local_action: shell mkdir -p {{ inventory_dir }}/backup/{{ database }}/{{ ansible_date_time.date }}
  become: false
  vars:
     ansible_become: no

- name: list backup files
  become_user: "{{ vitam_defaults.users.vitamdb }}"
  shell: find . -maxdepth 1 -type f
  args:
    chdir: "{{ dabase_backup_dir }}/{{ database }}"
  register: files_to_copy

# fetch file
- name: get back mongodump files locally in {{ inventory_dir }}/backup/{{ database }}/{{ ansible_date_time.date }}/
  become: true
  fetch:
    src: "{{ dabase_backup_dir }}/{{ database }}/{{ item }}"
    dest: "{{ inventory_dir }}/backup/{{ database }}/{{ ansible_date_time.date }}/{{ item }}"
    flat: yes
  # ignore_errors: true
  run_once: true
  with_items:
    - "{{ files_to_copy.stdout_lines }}"

# then remove file
- name: ensure {{ database }} backup dir is absent
  file:
    path: "{{ dabase_backup_dir }}/{{ database }}"
    state: absent

# possible command example to restore database :
# mongorestore --host 172.17.0.2 --db "identity" --gzip --username=security-internal --password=passW0rD /backup/identity/2019-07-04/ --drop --restoreDbUsersAndRoles
