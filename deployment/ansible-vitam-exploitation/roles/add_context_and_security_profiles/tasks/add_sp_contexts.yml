---

- name: Check if security profile already exists in functional-admin
  uri:
    method: GET
    body: "{ \"$query\":{\"$eq\":{\"Identifier\":\"{{ item.identifier }}\"}},\"$filter\":{},\"$projection\":{} }"
    status_code: 200
    url: "http://{{ hostvars[groups['hosts_functional_administration'][0]]['ip_admin'] }}:{{ vitam.functional_administration.port_admin }}/v1/admin/securityprofiles"
    body_format: "json"
    return_content: true
  # loop: "{{ vitam_additional_securityprofiles }}"
  run_once: true
  register: securityprofile_check

- name: Modify json & convert to dict...
  set_fact:
    securityprofile_check_json: "{{ securityprofile_check.json |regex_replace('\\$hits', 'hits')|regex_replace('\\$results', 'results')|regex_replace('\\#id', 'id') }}"
  run_once: true

# apply only if hit == 0
- block:
  - name: Import security profile to functionnal-administration
    uri:
      method: POST
      body: "[{ \"Name\": \"{{ item.name }}\", \"Identifier\": \"{{ item.identifier }}\", \"FullAccess\": {{ item.hasFullAccess }}, \"Permissions\": {{ item.permissions }} }]"
      status_code: 200,201
      url: "http://{{ hostvars[groups['hosts_functional_administration'][0]]['ip_admin'] }}:{{ vitam.functional_administration.port_admin }}/v1/admin/securityprofiles"
      body_format: "json"
      headers:
        X-Tenant-Id: "{{ vitam_tenant_admin }}"
    run_once: true
    register: functional_adm_response

  - name: set fact
    set_fact:
      security_profile: "{{ item.identifier }}"
    run_once: true
    # bad rustine pour la suite...

  - name: Send associated context(s) to functionnal-admin
    uri:
      method: POST
      body: "[{ \"Name\": \"{{ item.name }}\",\"Identifier\": \"{{ item.identifier }}\", \"Status\": \"{{ item.status }}\", \"EnableControl\": \"{{ item.enable_control }}\", \"SecurityProfile\": \"{{ security_profile }}\", \"Permissions\": {{ item.permissions }} }]"
      status_code: 200,201
      url: "http://{{ hostvars[groups['hosts_functional_administration'][0]]['ip_admin'] }}:{{ vitam.functional_administration.port_admin }}/v1/admin/contexts"
      body_format: "json"
      timeout: "{{ vitam_defaults.services.api_call_timeout }}"
      headers:
        X-Tenant-Id: "{{ vitam_tenant_admin }}"
    run_once: true
    register: functional_adm_response
    loop : "{{ item.contexts }}"

  # boucle Ã  faire pour chaque rang sur la directive certificates (that is a table)
  - include_tasks: add_certificates.yml
    loop: "{{ item.contexts }}"
    loop_control:
      loop_var: contexte

  when: securityprofile_check_json.hits.total == 0
