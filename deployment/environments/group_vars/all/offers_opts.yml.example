# This is the default vitam strategy ('default'). It is mandatory and must define a referent offer.
# This list of offers will be ordered by the property rank. It has to be completed if more offers are necessary
# The property rank indicates the rank of the offer in the strategy. The ranking is done is ASC order
vitam_strategy:
  - name: offer-fs-1
    referent: true
    asyncRead: false
    rank: 0

# Optional params for each offers in vitam_strategy. If not set, the default values are applied.
#    referent: false              # true / false (default), only one per site must be referent
#    status: ACTIVE               # ACTIVE (default) / INACTIVE
#    vitam_site_name: distant-dc2 # default is the value of vitam_site_name defined in your local inventory file, should be specified with the vitam_site_name defined for the distant offer
#    distant: false               # true / false (default). If set to true, it will not check if the provider for this offer is correctly set
#    id: idoffre                  # OPTIONAL, but IF ACTIVATED, MUST BE UNIQUE & SAME if on another site
#    asyncRead: false             # true / false (default). Should be set to true for tape offer only
#    rank: 0                      # Integer that indicates in ascending order the priority of the offer in the strategy

# Example for tape offer:
#  - name: offer-tape-1
#    referent: false
#    asyncRead: true
#    rank: 1

# Example distant offer:
#  - name: distant
#    referent: false
#    vitam_site_name: distant-dc2
#    distant: true # Only add this parameter when distant offer (not on same platform)
#    rank: 3

# WARNING : multi-strategy is a BETA functionality
# More strategies can be added but are optional
# Strategy name must only use [a-z][a-z0-9-]* pattern
# Any strategy must contain at least one offer
# This list of offers is ordered (by strictly-incremental "rank"). It can and has to be completed if more offers are necessary
# Every strategy can define at most one referent offer.
# other_strategies:
#  metadata:
#    - name: offer-fs-1
#      referent: true
#      asyncRead: false
#      rank: 0
#    - name: offer-fs-2
#      referent: false
#      asyncRead: false
#      rank: 1
#  binary:
#    - name: offer-s3-1
#      referent: true
#      asyncRead: false
#      rank: 0
#    - name: offer-tape-1
#      referent: false
#      asyncRead: true
#      rank: 1

# DON'T forget to add associated passwords in vault-vitam.yml with same tree when using provider openstack-swift*
# ATTENTION !!! Each offer has to have a distinct name, except for clusters binding a same physical storage
# WARNING : for offer names, please only use [a-z][a-z0-9-]* pattern
vitam_offers:
  offer-fs-1:
    # param can be filesystem-hash (recommended) or filesystem (NOT recommended)
    provider: filesystem-hash
    # Offer log compaction
    offer_log_compaction:
      ## Expiration, here offer logs 21 days old will be compacted
      expiration_value: 21
      ## Choose one of "MILLENNIA", "HALF_DAYS", "MILLIS", "FOREVER", "MICROS", "CENTURIES", "DECADES", "YEARS", "DAYS", "SECONDS", "HOURS", "MONTHS", "WEEKS", "NANOS", "MINUTES", "ERAS"
      expiration_unit: "DAYS"
      ## Compaction bulk size here 10 000 offers logs (at most) will be compacted (Expected value between 1 000 and 200 000)
      compaction_size: 10000
    # Batch processing thread pool size
    maxBatchThreadPoolSize: 32
    # Batch metadata computation timeout in seconds
    batchMetadataComputationTimeout: 600
################################################################################
  offer-swift-1:
    # provider : openstack-swift for v1 or openstack-swift-v3 for v3
    provider: openstack-swift-v3
    # swiftKeystoneAuthUrl : URL de connexion à keystone
    swiftKeystoneAuthUrl: https://openstack-hostname:port/auth/1.0
    # swiftDomain : domaine OpenStack dans lequel l'utilisateur est enregistré
    swiftDomain: domaine
    # swiftUser : identifiant de l'utilisateur
    swiftUser: utilisateur
    # swiftPassword: has to be set in vault-vitam.yml (encrypted) with same structure => DO NOT COMMENT OUT
    # swiftProjectName : nom du projet openstack
    swiftProjectName: monTenant
    ### Optional parameters
    # swiftUrl: optional variable to force the swift URL
    # swiftUrl: https://swift-hostname:port/swift/v1
    #SSL TrustStore
    swiftTrustStore: /chemin_vers_mon_fichier/monSwiftTrustStore.jks
    #Max connection (concurrent connections), per route, to keep in pool (if a pooling ConnectionManager is used) (optional, 200 by default)
    swiftMaxConnectionsPerRoute: 200
    #Max total connection (concurrent connections) to keep in pool (if a pooling ConnectionManager is used) (optional, 1000 by default)
    swiftMaxConnections: 1000
    #Max time (in milliseconds) for waiting to establish connection (optional, 200000 by default)
    swiftConnectionTimeout: 200000
    #Max time (in milliseconds) waiting for a data from the server (socket) (optional, 60000 by default)
    swiftReadTimeout: 60000
    #Time (in seconds) to renew a token before expiration occurs (blocking) (optional, 60 by default)
    swiftHardRenewTokenDelayBeforeExpireTime: 60
    #Time (in seconds) to renew a token before expiration occurs (optional, 300 by default)
    swiftSoftRenewTokenDelayBeforeExpireTime: 300
    # Offer log compaction
    offer_log_compaction:
      ## Expiration, here offer logs 21 days old will be compacted
      expiration_value: 21
      ## Choose one of "MILLENNIA", "HALF_DAYS", "MILLIS", "FOREVER", "MICROS", "CENTURIES", "DECADES", "YEARS", "DAYS", "SECONDS", "HOURS", "MONTHS", "WEEKS", "NANOS", "MINUTES", "ERAS"
      expiration_unit: "DAYS"
      ## Compaction bulk size here 10 000 offers logs (at most) will be compacted (Expected value between 1 000 and 200 000)
      compaction_size: 10000
    # Batch processing thread pool size
    maxBatchThreadPoolSize: 32
    # Batch metadata computation timeout in seconds
    batchMetadataComputationTimeout: 600
    # Enable / Disable use of vitam custom headers for offer requests
    enableCustomHeaders: false
    # List of vitam custom headers used by offer requests
    #customHeaders:
    #  - key: 'Cookie'
    #    value: 'Origin=vitam'
################################################################################
  offer-s3-1:
    # provider : can only be amazon-s3-v1 for Amazon SDK S3 V1
    provider: 'amazon-s3-v1'
    # s3Endpoint : URL of connection to S3
    s3Endpoint: https://s3.domain/
    ### Optional parameters
    # s3RegionName (optional): Region name (default value us-east-1)
    s3RegionName: us-east-1
    # s3SignerType (optional): Signing algorithm.
    #     - signature V4 : 'AWSS3V4SignerType' (default value)
    #     - signature V2 : 'S3SignerType'
    s3SignerType: AWSS3V4SignerType
    # s3PathStyleAccessEnabled (optional): 'true' to access bucket in "path-style", else "virtual-hosted-style" (true by default)
    s3PathStyleAccessEnabled: true
    # s3MaxConnections (optional): Max total connection (concurrent connections) (50 by default)
    s3MaxConnections: 50
    # s3ConnectionTimeout (optional): Max time (in milliseconds) for waiting to establish connection (10000 by default)
    s3ConnectionTimeout: 10000
    # s3SocketTimeout (optional): Max time (in milliseconds) for reading from a connected socket (50000 by default)
    s3SocketTimeout: 50000
    # s3RequestTimeout (optional): Max time (in milliseconds) for a request (0 by default, disabled)
    s3RequestTimeout: 0
    # s3ClientExecutionTimeout (optional): Max time (in milliseconds) for a request by java client (0 by default, disabled)
    s3ClientExecutionTimeout: 0
    # Offer log compaction
    offer_log_compaction:
      ## Expiration, here offer logs 21 days old will be compacted
      expiration_value: 21
      ## Choose one of "MILLENNIA", "HALF_DAYS", "MILLIS", "FOREVER", "MICROS", "CENTURIES", "DECADES", "YEARS", "DAYS", "SECONDS", "HOURS", "MONTHS", "WEEKS", "NANOS", "MINUTES", "ERAS"
      expiration_unit: "DAYS"
      ## Compaction bulk size here 10 000 offers logs (at most) will be compacted (Expected value between 1 000 and 200 000)
      compaction_size: 10000
    # Batch processing thread pool size
    maxBatchThreadPoolSize: 32
    # Batch metadata computation timeout in seconds
    batchMetadataComputationTimeout: 600
################################################################################
  offer-tape-1:
    provider: tape-library
    tapeLibraryConfiguration:

      # Max size (in bytes) of a TAR archive entry.
      #    Cannot exceed maxTarEntrySize or 8_000_000_000 (TAR format restriction)
      #    Recommended size: 1_000_000_000 (1 GB)
      maxTarEntrySize: 1_000_000_000
      # Max TAR file size (in bytes).
      #    Small TAR files increase IO operations on tapes.
      #    Big TAR files increase memory usage on disk, and slows down data retrieval
      #    Recommended size: 10_000_000_000 (10 GB)
      maxTarFileSize: 10_000_000_000

      # Enable overriding non-empty cartridges
      # WARNING : FOR DEV/TEST ONLY. DO NOT ENABLE IN PRODUCTION.
      forceOverrideNonEmptyCartridges: false

      # Local cache configuration (/vitam/data/offer/cachedTars)
      # Max disk cache size. Enough disk space must be available to persist :
      #   - TAR archives containing all persisted metadata to Vitam (about 10 Kb per archival unit or object group, including updates & eliminated objects)
      #   - TAR archives containing all system objects persisted by Vitam (traceability files, reports...)
      #   - TAR archives containing all binaries being actively used (being accessed by a workflow requiring access to binaries : DIP, transfer request, preservation & corrective audit)
      # /!\ Currently, tape storage offer only support soft deletes (no physical delete from archives on tapes). Tape library & cache capacity must be sized to persist all versions of written objects for the whole system life-time.
      # /!\ Important : Disk space usage must be monitored periodically to ensure enough space is available
      cachedTarMaxStorageSpaceInMB: 10_000_000
      # High disk cache level. When reached, least recently used TAR archives are evicted, until enough space (cachedTarSafeStorageSpaceThresholdInMB) is available
      cachedTarEvictionStorageSpaceThresholdInMB: 8_000_000
      # Safe disk cache level. TAR archive eviction stops when disk space usage is bellow this threshold
      cachedTarSafeStorageSpaceThresholdInMB: 7_00_000

      # Maximum objects to fetch by access request. Cannot exceed 100_000.
      maxAccessRequestSize: 10_000
      # Expiration delay & unit of ready access requests (access requests whose all objects are available on disk). After expiration, objects are no more guaranteed to be available on disk.
      readyAccessRequestExpirationDelay: 30
      readyAccessRequestExpirationUnit: DAYS
      # Purge delay & unit of ready access requests (access requests whose all objects are available on disk). After timeout, the access request is deleted.
      readyAccessRequestPurgeDelay: 60
      readyAccessRequestPurgeUnit: DAYS
      # Background access request cleanup task interval delay & unit
      accessRequestCleanupTaskIntervalDelay: 15
      accessRequestCleanupTaskIntervalUnit: MINUTES

    # Bucket configuration
    # ====================
    # Bucket allows physical separation of data written to the tapes by tenant(s).
    # Data of tenants of the same bucket can be written on the same tape.
    # Data of tenants of different buckets cannot be written to the same tape.
    #
    # "name": the name of the bucket
    #    Should be unique
    #    Can only contain alphanumerical only characters (a-z, A-Z, 0-9)
    #    Do not use "backup" as a bucket name (reserved internally for DB backup)
    # "tenants": The list of tenants of the bucket.
    #    Every bucket contins 1 or multiple tenants.
    #    Every tenant should belong to exactly 1 bucket (no duplicates, no missing tenants)
    #    The affectation of a tenant to a bucket is definitive and CANNOT be changed later
    #    When adding new tenants to Vitam, they can be added to an existing bucket OR to a new bucket
    # "tarBufferingTimeoutInMinutes":
    #    Max buffering delay before a TAR archive is sealed and scheduled for archival on tape.
    #    A TAR archive is sealed once it reaches a critical size ("maxTarFileSize") OR buffering delay expired, whatever occurs first
    topology:
      buckets:
        -
          name: test
          tenants: [0]
          tarBufferingTimeoutInMinutes: 60
        -
          name: admin
          tenants: [1]
          tarBufferingTimeoutInMinutes: 60
        -
          name: prod
          tenants: [2,3,4,5,6,7,8,9]
          tarBufferingTimeoutInMinutes: 60

    # Tape library configuration :
    # ============================
    # /!\ Only a single tape library is supported per offer instance. Do NOT configure multiple tape libraries.

    tapeLibraries:
      -
        name: TAPE_LIB_1

        # Tape changer configuration
        # ==========================
        # "device": changer device path.
        #    Device path should be referenced using /dev/tape/by-id/{device} alias. Do NOT use /dev/sg* devices.
        #    Only a single changer is supported. Do NOT configure multiple changers.
        # "mtxPath": path to mtx linux utility (usually /usr/sbin/mtx)
        # "timeoutInMilliseconds": Timeout (in MS) for mtx command execution.
        #    Timeout should be large enough to handle all long-running operations (full tape library status, tape loading & unloading...).
        #
        robots:
          -
            device: /dev/tape/by-id/scsi-1QUANTUM_10F73224E6664C84A1D00000
            mtxPath: "/usr/sbin/mtx"
            timeoutInMilliseconds: 3600000

        # Drive configuration
        # ===================
        # Multiple devices can be defined.
        #
        # index: 0-based drive index is the same order as reported in "mtx status"
        # device: drive device path
        #    Only use "nst" devices. Do NOT use "st" devices.
        #    Device path should be referenced using /dev/tape/by-id/{device}-nst alias. Do NOT use /dev/nst* devices.
        # mtPath: path to mt linux utility (usually /bin/mt)
        # ddPath: path to dd linux utility (usually /bin/dd)
        # timeoutInMilliseconds: Timeout (in MS) for mt & dd command execution.
        #    Should be large enough to handle all long-running operations on drives (status, move, rewind, ejection, read & write...).
        # readWritePriority: Defined the processing priority of read, write and backup orders. Should be one of
        #    - "BACKUP" : Drive executes DB backup write orders, then regular data write orders, then read orders.
        #    - "WRITE" : Drive executes regular data write orders, then read orders.
        #    - "READ" : Drive executes data read orders, then regular data write orders.
        #    /!\ At least one drive with BACKUP priority is required to handle DB backups.

        drives:
          -
            index: 0
            device: /dev/tape/by-id/scsi-1IBM_ULT3580-TD6_1235308739-nst
            mtPath: "/bin/mt"
            ddPath: "/bin/dd"
            timeoutInMilliseconds: 3600000
            readWritePriority: BACKUP
          -
            index: 1
            device: /dev/tape/by-id/scsi-1IBM_ULT3580-TD6_0951859786-nst
            mtPath: "/bin/mt"
            ddPath: "/bin/dd"
            timeoutInMilliseconds: 3600000
            readWritePriority: READ
          -
            index: 2
            device: /dev/tape/by-id/scsi-1IBM_ULT3580-TD6_0269493808-nst
            mtPath: "/bin/mt"
            ddPath: "/bin/dd"
            timeoutInMilliseconds: 3600000
            readWritePriority: READ
          -
            index: 3
            device: /dev/tape/by-id/scsi-1IBM_ULT3580-TD6_0566471858-nst
            mtPath: "/bin/mt"
            ddPath: "/bin/dd"
            readWritePriority: WRITE
            timeoutInMilliseconds: 3600000

        # Tape library cartridge configuration
        # ====================================
        # Full cartridge detection threshold in MB.
        # When a write error occurs on a tape whose current space usage exceeds this threshold, the tape is considered as "FULL", and data will be written to another tape
        # When a write error occurs on a tape whose current space usage is bellow this threshold, the tape is considered as "CORRUPTED", and its status is set to "CONFLICT"
        # Typically, to be set to 90% of theoretical tape capacity (excluding compression) of the tape library
        fullCartridgeDetectionThresholdInMB : 2_000_000

    offer_log_compaction:
      ## Expiration, here offer logs 21 days old will be compacted
      expiration_value: 21
      ## Choose one of "MILLENNIA", "HALF_DAYS", "MILLIS", "FOREVER", "MICROS", "CENTURIES", "DECADES", "YEARS", "DAYS", "SECONDS", "HOURS", "MONTHS", "WEEKS", "NANOS", "MINUTES", "ERAS"
      expiration_unit: "DAYS"
      ## Compaction bulk size here 10 000 offers logs (at most) will be compacted (Expected value between 1 000 and 200 000)
      compaction_size: 10000
    # Batch processing thread pool size
    maxBatchThreadPoolSize: 32
    # Batch metadata computation timeout in seconds
    batchMetadataComputationTimeout: 600
################################################################################
  # example_swift_v1:
  #    provider: openstack-swift
  #    swiftKeystoneAuthUrl: https://keystone/auth/1.0
  #    swiftDomain: domain
  #    swiftUser: user
  #    swiftPassword: has to be set in vault-vitam.yml (encrypted) with same structure => DO NOT COMMENT OUT
  # THIS PART IS ONLY FOR CLEANING (and mandatory for this use case)
  #    swiftProjectId: related to OS_PROJECT_ID
  #    swiftRegionName: related to OS_REGION_NAME
  #    swiftInterface: related to OS_INTERFACE
  # example_swift_v3:
  #    provider: openstack-swift-v3
  #    swiftKeystoneAuthUrl: https://keystone/v3
  #    swiftDomain: domaine
  #    swiftUser: user
  #    swiftPassword: has to be set in vault-vitam.yml (encrypted) with same structure => DO NOT COMMENT OUT
  #    swiftProjectName: monTenant
  #    projectName: monTenant
  # THIS PART IS ONLY FOR CLEANING (and mandatory for this use case)
  #    swiftProjectId: related to OS_PROJECT_ID
  #    swiftRegionName: related to OS_REGION_NAME
  #    swiftInterface: related to OS_INTERFACE
  #
  #    swiftTrustStore: /chemin_vers_mon_fichier/monSwiftTrustStore.jks
  #    swiftMaxConnectionsPerRoute: 200
  #    swiftMaxConnections: 1000
  #    swiftConnectionTimeout: 200000
  #    swiftReadTimeout: 60000
  #    Time (in seconds) to renew a token before expiration occurs
  #    swiftHardRenewTokenDelayBeforeExpireTime: 60
  #    swiftSoftRenewTokenDelayBeforeExpireTime: 300
  #    enableCustomHeaders: false
  #    customHeaders:
  #      - key: 'Cookie'
  #        value: 'Origin=vitam'
