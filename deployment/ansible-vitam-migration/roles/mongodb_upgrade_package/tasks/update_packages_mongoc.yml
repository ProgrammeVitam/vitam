---

- block:

    # Elect a new primary member (if we are the primary)

    - name: Copy the step_down script
      template:
        src: "step_down.js.j2"
        dest: "{{ vitam_defaults.folder.root_path }}/app/mongoc/step_down.js"
        owner: "{{ vitam_defaults.users.vitamdb }}"
        group: "{{ vitam_defaults.users.group }}"
        mode: "{{ vitam_defaults.folder.conf_permission }}"
      when:
        - mongo_list |length > 1
        - is_primary_mongoc == true

    # ignore_errors: true as we are brutally disconnected by the server (because reboot)
    - name: Step down the member (elect a new primary member)
      shell: "mongo {{ ip_service }}:{{ mongo_port }}/admin -u {{ mongodb[mongo_cluster_name].localadmin.user }} -p {{ mongodb[mongo_cluster_name].localadmin.password }} --quiet < {{ vitam_defaults.folder.root_path }}/app/mongoc/step_down.js"
      when:
        - is_primary_mongoc == true
        - mongo_list |length > 1
      ignore_errors: true

    - name: Copy the master check script
      template:
        src: "wait_until_not_master.js.j2"
        dest: "{{ vitam_defaults.folder.root_path }}/app/mongoc/wait_until_not_master.js"
        owner: "{{ vitam_defaults.users.vitamdb }}"
        group: "{{ vitam_defaults.users.group }}"
        mode: "{{ vitam_defaults.folder.conf_permission }}"
      when:
        - is_primary_mongoc == true
        - mongo_list |length > 1

    - name: Wait until this member is not primary anymore
      shell: "mongo {{ ip_service }}:{{ mongo_port }}/admin -u {{ mongodb[mongo_cluster_name].localadmin.user }} -p {{ mongodb[mongo_cluster_name].localadmin.password }} --quiet < {{ vitam_defaults.folder.root_path }}/app/mongoc/wait_until_not_master.js"
      when:
        - is_primary_mongoc == true
        - mongo_list |length > 1

    # Upgrade the package

    - name: "Update mongodb packages ({{ mongo_version }})"
      yum:
        name: "{{ packages }}"
        state: "present"
        update_cache: "yes"   # make sure cache is up to date for upgrade
      vars:
        packages:
          - "mongodb-org-{{ mongo_version }}"
      register: result
      retries: "{{ packages_install_retries_number }}"
      until: result is succeeded
      delay: "{{ packages_install_retries_delay }}"
      when: ansible_distribution == "CentOS"

    - name: "Update mongodb packages ({{ mongo_version }})"
      apt:
        name: "{{ packages }}"
        state: "present"
        update_cache: "yes"   # make sure cache is up to date for upgrade
      register: result
      retries: "{{ packages_install_retries_number }}"
      until: result is succeeded
      delay: "{{ packages_install_retries_delay }}"
      vars:
        packages:
          - "mongodb-org={{ mongo_version }}"
          - "mongodb-org-mongos={{ mongo_version }}"
          - "mongodb-org-server={{ mongo_version }}"
          - "mongodb-org-shell={{ mongo_version }}"
          - "mongodb-org-tools={{ mongo_version }}"
      when: ansible_distribution == "Debian"

    - name: Disable default mongodb service
      systemd:
        name: mongod
        enabled: no
        state: stopped

    - name: Make sure the service is restarted
      systemd:
        name: vitam-mongoc
        daemon_reload: yes
        state: restarted
        enabled: "{{ mongodb.at_boot | default(service_at_boot) }}"

    - name: Check the service port
      wait_for:
        host: "{{ ip_service }}"
        port: "{{ mongodb.mongoc_port }}"
        timeout: "{{ vitam_defaults.services.start_timeout }}"

  when:
    - is_primary_mongoc == mongo_primary
