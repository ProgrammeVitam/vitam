---
#### Compute variables ####
- name: Populate service facts
  service_facts:

- name: Set command for CentOS
  set_fact:
    check_es_version: "rpm -q vitam-{{ composant.cluster_name }}"
  when: ansible_os_family == "RedHat"

- name: Set command for Debian
  set_fact:
    check_es_version: "dpkg-query -l  'vitam-{{ composant.cluster_name }}'"
  when: ansible_os_family == "Debian"

- name: checking whether elasticsearch package is already installed
  shell : "{{ check_es_version }}"
  register: is_installed
  ignore_errors: true

- import_tasks: pre_migration.yml
  when: is_installed.stdout.find('5.6.') != -1

- name: Set default directory for RedHat family
  set_fact:
    sysconfig_dir: "sysconfig"
    jvm_security_path: "/usr/lib/jvm/jre/lib/security"
    java_package: "{{ java_prerequisites.redhat }}"
  when: ansible_os_family == "RedHat"

- name: Set default directory for Debian
  set_fact:
    sysconfig_dir: "default"
    jvm_security_path: "/usr/lib/jvm/java-11-openjdk-amd64/jre/lib/security"
    java_package: "{{ java_prerequisites.debian }}"
  when: ansible_os_family == "Debian"


- name: Update elasticsearch memory value if empty and total memory < 64 Go
  set_fact:
    elasticsearch_memory: "{{ (ansible_memory_mb.real.total / 2) | int }}m"
  when:
    - ansible_memory_mb.real.total < 65536
    - elasticsearch_memory == ""

- name: Update elasticsearch memory value if empty and total memory >= 64 Go (don't allocate more than 32 Go RAM - official recommandation)
  set_fact:
    elasticsearch_memory: "32g"
  when:
    - ansible_memory_mb.real.total >= 65536
    - elasticsearch_memory == ""


- name: Define temporary memory size & unit vars
  set_fact:
    elasticsearch_memory_value: "{{ elasticsearch_memory| regex_replace('[kKmMgG]','') }}"
    elasticsearch_memory_unit: "{{ elasticsearch_memory| regex_replace('[0123456789]*','') }}"

#### Elasticsearch installation ####

# Only prerequisite for Debian : install openjdk from stretch-backports
- name: "install openjdk from {{ ansible_distribution_release }}-backports only when Debian (prerequisite for elasticsearch package)"
  apt:
    name: "{{ java_package }}"
    state: latest
    default_release: "{{ ansible_distribution_release }}-backports"
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  when:
    - ansible_os_family == "Debian"
    - disable_internet_repositories_install == false

- name: "install openjdk only when Debian (prerequisite for elasticsearch package)"
  apt:
    name: "{{ java_package }}"
    state: latest
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  when:
    - ansible_os_family == "Debian"
    - disable_internet_repositories_install == true

- name: install openjdk when CentOS (prerequisite for elasticsearch package)
  package:
    name: "{{ java_package }}"
    state: latest
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  when: ansible_os_family == "RedHat"

- name: install vitam-{{ composant.cluster_name }} package
  package:
    name: vitam-{{ composant.cluster_name }}
    state: latest
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  notify:
    - restart elasticsearch

- name: apply java MBean security
  blockinfile:
    path: "{{ jvm_security_path }}/java.policy"
    marker: "// {mark} ANSIBLE MANAGED BLOCK"
    insertafter: EOF
    create: yes # if not exists
    content: |
      grant {
        permission javax.management.MBeanTrustPermission "register";
      };

- name: ensure /var/run/{{ composant.cluster_name }} exists
  file:
    path: "/var/run/{{ composant.cluster_name }}"
    owner: "{{ vitam_defaults.users.vitamdb }}"
    group: "{{ vitam_defaults.users.group }}"
    state: directory
    mode: "{{ vitam_defaults.folder.folder_permission }}"

- name: Disable standard Easticsearch service
  service:
    name: elasticsearch
    state: stopped
    enabled: no

- name: ensure default config file is readable for anyone
  file:
    path: "/etc/{{ sysconfig_dir }}/elasticsearch"
    mode: 0664

- name: change default config ES_PATH_CONF value
  lineinfile:
    path: "/etc/{{ sysconfig_dir }}/elasticsearch"
    regexp: '^ES_PATH_CONF='
    line: "ES_PATH_CONF={{ elasticsearch_conf_dir }}"

- name: Ensure elasticsearch directories exist
  file:
    path: "{{ vitam_defaults.folder.root_path }}/{{ item }}/{{ composant.cluster_name }}"
    owner: "{{ vitam_defaults.users.vitamdb }}"
    group: "{{ vitam_defaults.users.group }}"
    state: directory
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  with_items:
    - conf
    - data
    - log
    - lib
    - tmp
  notify:
    - restart elasticsearch

- name: Ensure elasticsearch sysconfig directory exist
  file:
    path: "{{ elasticsearch_conf_dir }}/sysconfig"
    owner: "{{ vitam_defaults.users.vitamdb }}"
    group: "{{ vitam_defaults.users.group }}"
    state: directory
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  notify:
    - restart elasticsearch

- name: If already configured, remove limits max_open_files for Elasticsearch
  lineinfile:
    path: /etc/security/limits.conf
    regexp: '^{{ vitam_defaults.users.vitamdb }}     -    nofile    {{ elasticsearch_max_open_files }}'
    state: absent
  when: elasticsearch_max_open_files is defined
  notify:
    - restart elasticsearch

- name: Do not configure memlock limits anymore in /etc/security/limits.conf as it is now managed by systemD
  blockinfile:
    path: /etc/security/limits.conf
    state: absent
    marker: "<!-- {mark} ansible memlock for elasticsearch -->"
    block: |
      {{ vitam_defaults.users.vitamdb }} soft memlock unlimited
      {{ vitam_defaults.users.vitamdb }} hard memlock unlimited
  notify:
    - restart elasticsearch

- name: apply elasticsearch configuration yml
  template:
    src: "elasticsearch.{{ composant.groupe }}.yml.j2"
    dest: "{{ elasticsearch_conf_dir }}/elasticsearch.yml"
    owner: "{{ vitam_defaults.users.vitamdb }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  notify:
    - restart elasticsearch

- name: apply logging for elasticsearch configuration file
  template:
    src: "{{ item }}.j2"
    dest: "{{ elasticsearch_conf_dir }}/{{ item }}"
    owner: "{{ vitam_defaults.users.vitamdb }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - "log4j2.properties"
    - "jvm.options"
  notify:
    - restart elasticsearch

- name: apply elasticsearch sysconfig default
  template:
    src: "elasticsearch.j2"
    dest: "{{ elasticsearch_conf_dir }}/sysconfig/elasticsearch"
    owner: "{{ vitam_defaults.users.vitamdb }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  notify:
    - restart elasticsearch

#### Elasticsearch systemd service configuration ####

# Cf. https://serverfault.com/questions/546966/whats-removing-stuff-from-var-run-at-reboots-from-a-fedora-machine
# Cf. https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html
- name: add {{ composant.cluster_name }}.conf in tempfile.d
  template:
    src: "tempfile.d-elasticsearch.conf.j2"
    dest: "/usr/lib/tmpfiles.d/{{ composant.cluster_name }}.conf"
    owner: root
    group: root
    mode: 0644
  notify: create systemd tmpfiles

- name: force user on file elasticsearch-keystore
  file:
    path: "{{ elasticsearch_conf_dir }}/elasticsearch.keystore"
    owner: "{{ vitam_defaults.users.vitamdb }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: 0660
  ignore_errors: yes

#### Consul service declaration ####

- name: Ensure consul config dir is OK
  file:
    path: "{{ consul_folder_conf }}"
    state: directory
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"

- name: Deploy consul agent service declaration
  template:
    src: "service-componentid.json.j2"
    dest: "{{ consul_folder_conf }}/service-{{ composant.cluster_name }}.json"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  tags:
    - consul_conf
  notify:
   - reload consul configuration

# Force flush handlers to be sure previous role handlers have been run (for index templates)
- meta: flush_handlers

- name: Ensure consul service is started
  service:
    name: "vitam-consul"
    state: started

- name: Ensure service vitam-{{ composant.cluster_name }} is started and autostart at boot
  service:
    name: "vitam-{{ composant.cluster_name }}"
    state: started
    enabled: yes
  notify:
    - restart elasticsearch

- meta: flush_handlers

- import_tasks: post_migration.yml
  when: is_installed.stdout.find('5.6.') != -1
