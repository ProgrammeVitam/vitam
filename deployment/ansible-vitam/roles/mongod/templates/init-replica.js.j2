/*
 * IMPORTANT :
 * - This script creates mongod replica set on first Vitam installation.
 * - If mongod replica set already exists, it only checks for members configuration (idempotency). Adding / removing nodes is risky and is NOT supported.
 * - No need for authentication since "security.authorization" absent / removed from server configuration before script execution.
 * - Some commands fail with exception (e.g. rs.config()), while others might return an error code (e.g. rs.status()). Please handle errors carefully.
 * - Once replica set initialize, we need to wait for primary node election AND for primary node to become "Writable"
 */

function checkExistingReplicaSet() {

    var rsStatus = rs.status();

    if(!rsStatus.ok) {

        if(rsStatus.codeName === "NotYetInitialized") {
            print("INFO : No mongod replica set found");
            return false;
        }

        printjson(rsStatus);
        throw "ERROR : Cannot check mongod replica set status";
    }

    print("INFO : Exiting mongod replica set found");

    return true;
}

function checkExistingReplicaSetMembers() {

    var rsConfig = rs.config();

    let targetMembers = buildTargetReplicaSetMemberConfiguration();
    let rsConfigMembers = rsConfig.members;

    for (const targetMember of targetMembers) {
        let rsConfigMember = rsConfigMembers.find(member => member.host === targetMember.host);
        if(rsConfigMember) {
            if(rsConfigMember.arbiterOnly !== targetMember.arbiterOnly) {
                printjson(rsConfig);
                throw "ERROR : Host " + targetMember.host + " expected " +
                    (targetMember.arbiterOnly? "" : "NOT ") + "to be arbiter (mongo_arbiter=true)";
            }

            print("INFO : host " + targetMember.host + " found in mongod replica set");
        } else {
            printjson(rsConfig);
            throw "ERROR : Host " + targetMember.host + " not found in mongod replica set";
        }
    }

    if(targetMembers.length != rsConfigMembers.length) {
        printjson(rsConfig);
        throw "ERROR : Found unexpected / unknown mongod ReplicaSet members";
    }
}

function buildTargetReplicaSetMemberConfiguration() {
    var idCpt = 0;
    let members = [ { _id: idCpt++, host: "{{ ip_service }}:{{ mongodb.mongod_port }}", arbiterOnly: false } ];
{% for host in groups[group_name] %}
    {% if mongo_cluster_name == hostvars[host]['mongo_cluster_name'] %}
        {% if mongo_shard_id == hostvars[host]['mongo_shard_id'] %}
            {% if hostvars[host]['mongo_rs_bootstrap'] is not defined or hostvars[host]['mongo_rs_bootstrap'] | lower != "true" %}
    members.push({
        _id: idCpt++,
        host: "{{ hostvars[host]['ip_service'] }}:{{ mongodb.mongod_port }}",
        priority: {{ '10' if (hostvars[host]['is_small'] is not defined or hostvars[host]['is_small'] | lower != "true") else '1'}},
        arbiterOnly: {{ 'true' if (hostvars[host]['mongo_arbiter'] is defined and hostvars[host]['mongo_arbiter'] | lower == "true") else 'false'}}
    });
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
    return members;
}

function initReplicaSetPrimary() {

    let members = buildTargetReplicaSetMemberConfiguration();

    let rsInit = rs.initiate(
        {
            _id: "shard{{ mongo_shard_id }}",
            members: members
        }
    )

    if(!rsInit.ok) {
        printjson(rsInit);
        throw "ERROR : Cannot initialize mongod replica set";
    }
}

function waitForReplicaSetPrimaryElection() {

    var status;
    for (let i = 0; i < 60; i++) {

        status = rs.status();

        if(!status.ok) {
            printjson(status);
            throw "ERROR : Cannot get mongod replica set status";
        }

        if(status.myState === 1) {
            print("OK : mongod replica set elected primary node");
            return;
        }

        // Retry later
        sleep(1000);
    }

    printjson(status);
    throw "ERROR : Timeout - NO PRIMARY NODE FOUND";
}

function waitForWritablePrimary() {

    var instanceStatus;
    for (let i = 0; i < 60; i++) {

        instanceStatus = db.hello();

        if(!instanceStatus.ok) {
            printjson(instanceStatus);
            throw "ERROR : Cannot get db instance status";
        }

        if(instanceStatus.isWritablePrimary) {
            print("OK : Primary node is writable");
            return;
        }

        // Retry later
        sleep(1000);
    }

    printjson(instanceStatus);
    throw "ERROR : Timeout - NO PRIMARY NODE FOUND";
}

if(checkExistingReplicaSet()) {
    checkExistingReplicaSetMembers();
    print("INFO : mongod replica set already configured.");
} else {
    print("INFO : Initializing mongod replica set");
    initReplicaSetPrimary();
    waitForReplicaSetPrimaryElection();
    waitForWritablePrimary();
    print("INFO : mongod replica set intitialization OK");
}
