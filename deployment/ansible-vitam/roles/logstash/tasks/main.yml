---

#### Logstash installation ####
- name: check wether replica number for logstash is compatible with inventory
  fail: msg="Too much replica defined for logstash index in elasticsearch-log"
  when: groups['hosts_elasticsearch_log']|length <= kibana.log.metrics.replica and groups['hosts_elasticsearch_log']|length>1

- name: "Install {{ logstash_package }} package"
  package:
    name: "{{ logstash_package }}"
    state: present
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  notify:
    - "logstash - restart service"

## Logstash configuration

- name: Ensure logstash directories exist
  file:
    path: "{{ vitam_defaults.folder.root_path }}/{{ item }}/logstash"
    owner: "{{ logstash.user }}"
    group: "{{ vitam_defaults.users.group }}"
    state: directory
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  with_items:
    - data
    - log
    - conf
    - lib
    - tmp
  notify:
    - "logstash - restart service"

- name: ensure json conf extra directory exists
  file:
    path: "{{ logstash_confextra_dir }}"
    owner: "{{ logstash.user }}"
    group: "{{ vitam_defaults.users.group }}"
    state: directory
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  notify:
    - "logstash - restart service"

- name: apply configuration files
  template:
    src: "{{ item }}.j2"
    dest: "/etc/logstash/{{ item }}"
    owner: root
    mode: 0644
  with_items:
    - "jvm.options"
    - "log4j2.properties"
    - "startup.options"
    - "logstash.yml"
  notify:
    - "logstash - restart service"

- name: configure logstash parser
  template:
    src: "{{ item }}.j2"
    dest: "{{ logstash_conf_dir }}/{{ item }}"
    owner: "{{ logstash.user }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - "01-logstash-vitam-input.conf"
    - "02-logstash-vitam-filter.conf"
    - "03-logstash-vitam-output.conf"
  notify:
    - "logstash - restart service"

- name: add vitam patterns conf
  template:
    src: "vitam-patterns.j2"
    dest: "/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-patterns-core-{{ logstash_patterns_core_version }}/patterns/vitam"
    owner: "{{ logstash.user }}"
  notify:
    - "logstash - restart service"

- name: configure extra parser configuration
  template:
    src: "{{ item }}.j2"
    dest: "{{ logstash_conf_dir }}/extra/{{ item }}"
    owner: logstash
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - "elasticsearch-template.json"
  notify:
    - "logstash - restart service"

#### Consul configuration ####

- name: Ensure consul config dir is OK
  file:
    path: "{{ consul_folder_conf }}"
    state: directory
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"

- name: Deploy consul agent service declaration
  template:
    src: "service-{{ item }}.json.j2"
    dest: "{{ consul_folder_conf }}/service-{{ item }}.json"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - logstash
  tags:
    - consul_conf
  notify:
   - "logstash - reload consul configuration"

- name: Flush handlers
  meta: flush_handlers

- name: Ensure logstash service is started at boot
  service:
    name: logstash
    enabled: "{{ logstash.at_boot | default(service_at_boot) }}"
    state: started

- name: Check logstash service health in local consul agent
  uri:
    url: "http://{{ (inventory_hostname in groups['hosts_consul_server']) | ternary(hostvars[inventory_hostname]['ip_admin'], '127.0.0.1') }}:8500/v1/agent/health/service/name/logstash"
  register: result
  until:
    - result.status is defined
    - result.status == 200
  retries: "{{ vitam_defaults.services.status_retries_number }}"
  delay: "{{ vitam_defaults.services.status_retries_delay }}"
