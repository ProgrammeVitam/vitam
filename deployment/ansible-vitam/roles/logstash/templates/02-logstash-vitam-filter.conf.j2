
filter
{

    # --------------------------------------------------
    # Basic text transforms
    # --------------------------------------------------

    mutate {
        # logback send 011 code for \t and 012 for \n
        gsub => [ "message", "#011", "\t"   ]
        gsub => [ "message", "#012", "\n"   ]
        gsub => [ "message", "\t"  , ' '    ]
        gsub => [ "message", "\n"  , '    ' ]
    }

    # --------------------------------------------------
    # Special transforms for syslog & file inputs
    # --------------------------------------------------

    # Todo move this at the end (to find vitam-* for real vitam components)
    if [input] == "syslog" {
        mutate {
            rename => { "logsource" => "hostname" }
        }
        grok {
            break_on_match => false
            keep_empty_captures => true
            # If program name starts with 'vitam-', keep only the suffix
            match => [ "program", "(?:(vitam[-._])?)(?<vitam_component>[^.]*)" ]
            overwrite => [ "vitam_component" ]
        }
    }

    else if [input] == "logstash" {
        mutate {
            add_field => { "vitam_component" => "logstash" }
        }
    }

    # --------------------------------------------------
    # Let's parse the message depending on the program sending it
    # --------------------------------------------------

    if [vitam_component] =~ "mongo" {
        # Drop mongo (I)nformational log, for Verbosity Level of 0, if mongodb.drop_info_log is defined to true
        {% if mongodb.drop_info_log==true %}
        if [message] =~ ".*\s+[ID]\s+.*" {
            drop { }
        }
        {% endif %}
        grok {
            break_on_match => false
            keep_empty_captures => true
            match => [ "message", "(?:%{GREEDYDATA:log_message})" ]
            # "timestamp" => "Aug 19 20:09:00",
            match => [ "timestamp", "(%{MONTH:mois}%{SPACE}%{MONTHDAY:jour}%{SPACE}%{HOUR:hr}:%{MINUTE:mn}:%{SECOND:sec})" ]
        }
        # Here, we apparently need to do that in 2 steps, instead the correct date is not set in the timestamp variable.
        mutate { add_field => [ "date_msg", "%{+YYYY}-%{+MM}-%{jour} %{hr}:%{mn}:%{sec}" ] }
        mutate { replace => { timestamp => "%{date_msg}" } }
        # TODO review : either don't use the local variable date_msg, or unset it here.
        mutate { add_field => [ "logger", "mongo" ] }
        date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }

    else if [vitam_component] =~ "elasticsearch-" {
        grok {
            match => [
                "message",
                "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}\[%{LOGLEVEL:log_level}%{SPACE}\]%{SPACE}\[(?<elastic_module>[^\]]*)%{SPACE}\]%{SPACE}(\[(?<elastic_node>[^\]]*)\])?%{SPACE}%{GREEDYDATA:log_message}%{SPACE}"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => [ "logger", "elasticsearch" ] }
        date {
            match => [ "timestamp" , "ISO8601" ]
            target => [ "@timestamp" ]
        }
    }

    else if [vitam_component] =~ "curator" {
        grok {
            match => [
                "message",
                "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:log_level}%{SPACE}(?<curator_module>[^ ]*)%{SPACE}(?:%{GREEDYDATA:log_message})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "curator" } }
        date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
            target => [ "@timestamp" ]
        }
    }

    else if [vitam_component] =~ "consul" {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{CONSUL_TIMESTAMP:timestamp}?%{SPACE}(\[%{LOGLEVEL:log_level}\])?%{SPACE}(?<consul_module>[^:]*)?:?%{SPACE}(?:%{GREEDYDATA:log_message})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "consul" } }
        if [log_level] == "ERR" {
            mutate { replace => { "log_level" => "ERROR" } }
        }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
    else if [vitam_component] =~ "clamd" {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{CONSUL_TIMESTAMP:timestamp}?%{SPACE}(\[%{LOGLEVEL:log_level}\])?%{SPACE}(?<clamd_module>[^:]*)?:?%{SPACE}(?:%{GREEDYDATA:log_message})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "clamd" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
{% if syslog.name == 'syslog-ng' %}
    else if [vitam_component] =~ "systemd" or  [vitam_component] =~ "sudo" or [vitam_component] =~ "ansible" {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{GREEDYDATA:log_message}"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "systemd" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
    else if [vitam_component] =~ "kibana" {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{GREEDYDATA:log_message}"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "kibana" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
    else if [vitam_component] =~ "syslog-ng" {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{GREEDYDATA:log_message}"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "syslog-ng" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }

{% endif %}
    else if [vitam_component] =~ "yum" {
        grok {
            break_on_match => false
            match => [
                "message",
                "[%{LOGLEVEL:log_level}]%{SPACE}(?:%{GREEDYDATA:msg_data})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "yum" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
    else if [vitam_component] =~ "cerebro" {
        grok {
            break_on_match => false
            match => [
                "message",
                "[%{LOGLEVEL:log_level}]%{SPACE}(?:%{GREEDYDATA:msg_data})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "cerebro" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
    else if [vitam_component] =~ "useradd" or  [vitam_component] =~ "groupadd" {
        grok {
            break_on_match => false
            match => [
                "message",
                "[%{LOGLEVEL:log_level}]%{SPACE}(?:%{GREEDYDATA:msg_data})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "usermgmt" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
    else if [vitam_component] =~ "dns_localhost_enforce" {
        grok {
            break_on_match => false
            match => [
                "message",
                "[%{LOGLEVEL:log_level}]%{SPACE}(?:%{GREEDYDATA:msg_data})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "systemd" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
    else if [vitam_component] =~ "logstash" {
        json {
            source => "message"
        }

        if [level]     { mutate { rename => { "level"     => "log_level"          } } }
        if [message]   { mutate { rename => { "message"   => "log_message"        } } }
        if [error]     { mutate { rename => { "error"     => "logstash_error"     } } }
        if [backtrace] { mutate { rename => { "backtrace" => "logstash_backtrace" } } }
        if [file]      { mutate { rename => { "file"      => "logstash_file"      } } }
        if [line]      { mutate { rename => { "line"      => "logstash_line"      } } }
        if [method]    { mutate { rename => { "method"    => "logstash_method"    } } }
        if [host]      { mutate { rename => { "host"      => "hostname"           } } }

        date {
            match => [ "timestamp" , "ISO8601" ]
            target => [ "@timestamp" ]
        }

        mutate {
            add_field => { "logger" => "logstash" }
        }
    }

    # Now we should have only the vitam components
    # todo: change this by else if (vitam-*) and else {generic processing}
    # todo change module name to thread name (everywhere)
    else {
        grok {
             break_on_match => false
             keep_empty_captures => true
             match => [
                 "message",
                 "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}\[\[(?<java_thread>[\w-]*)\]\]%{SPACE}\[(?<request_id>\w*)\]%{SPACE}%{LOGLEVEL:log_level}%{SPACE}(?:%{GREEDYDATA:msg_data})"
             ]
             match => [
                 "msg_data",
                 "(?<java_class>%{JAVACLASS})%{SPACE}-%{SPACE}Caller[^%{SPACE}]+%{SPACE}at[%{SPACE}\n]+(?<java_caller>[^\s]*)%{SPACE}:%{SPACE}(?:%{JAVALOGMESSAGE:log_message})"
             ]
             match => [
                 "log_message",
                 "\[%{GREEDYDATA:component}\]%{SPACE}STP_%{GREEDYDATA:stepName}\,%{GREEDYDATA:taskName}\,%{GREEDYDATA:treatmentName}\,%{NUMBER:time}"
             ]

             overwrite => [ "timestamp" ]
        }

        if [time] != "" {
               mutate { convert => { "time" => "integer" } }
        }
        if [treatmentName] != "" {
               mutate { add_field => { "type" => "treatment" } }
        }
        else if [taskName] != ""  {
               mutate { add_field => { "type" => "task" } }
        }
        else if [stepName] != ""  {
               mutate { add_field => { "type" => "step" } }
        }
        else {
               mutate { add_field => { "type" => "undefined" } }
        }
        mutate { add_field => { "logger" => "logback" } }
        date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
            target => [ "@timestamp" ]
        }
    }
    # kernel part

    if [facility_label] =~ "kernel"  {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{GREEDYDATA:log_message}"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "kernel" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }

    if [log_message] =~ "keyFile"  {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{GREEDYDATA:log_message}"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "kernel" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }

    # --------------------------------------------------
    # If we don t have any grokparsefailure on the message, remove the unused fields
    # --------------------------------------------------

    # todo rescope some remove_fileds (ex: msg_data, space (should be removed), ...)
    if "_grokparsefailure" not in [tags] {
        mutate {
            remove_field => [
                "syslog_timestamp", "syslog_message",
                "syslog_program",
                "space", "date_msg", "mois", "jour", "hr", "mn", "sec",
                "severity", "facility", "facility_label", "severity_label", "priority",
                "request",
                "request_info",
                "path",
                "path_file",
                "path_log",
                "message",
                "msg_data",
                "input",
                "@version",
                "timestamp",
                "program"
            ]
        }
    }

}
