---

# FIXME : will need more testing to be sure it is mandatory here
- name: "install openjdk from {{ ansible_distribution_release }}-backports only when Debian"
  apt:
    name: openjdk-11-jre-headless
    state: latest
    default_release: "{{ ansible_distribution_release }}-backports"
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  when:
    - ansible_os_family == "Debian"
    - disable_internet_repositories_install == false

- name: "install openjdk only when Debian"
  apt:
    name: openjdk-11-jre-headless
    state: latest
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  when:
    - ansible_os_family == "Debian"
    - disable_internet_repositories_install == true

- include_tasks: tape_offer.yml
  when: vitam_struct.vitam_component == "offer"

# state: latest to handle snapshot versions
- name: Install {{ package_name }} package
  package:
    name: "{{ package_name }}"
    state: latest
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  tags:
    - update_package_vitam
  notify:
    - "vitam - restart service"
  when: force_vitam_version is not defined

# Force a specific version to install (even downgrade)
- block:

    - name: Install {{ package_name }} package
      apt:
        name: "{{ package_name }}={{ force_vitam_version }}"
        force: yes
        state: present
      tags:
        - update_package_vitam
      notify:
        - "vitam - restart service"
      when: ansible_os_family == "Debian"

    - name: Install {{ package_name }} package
      yum:
        allow_downgrade : yes
        name: "{{ package_name }}-{{ force_vitam_version }}"
        state: present
      register: result
      retries: "{{ packages_install_retries_number }}"
      until: result is succeeded
      delay: "{{ packages_install_retries_delay }}"
      tags:
        - update_package_vitam
      notify:
        - "vitam - restart service"
      when: ansible_os_family == "RedHat"

  when: force_vitam_version is defined

- name: ensure {{ package_name }} service is enabled
  service:
    name: "{{ package_name }}"
    enabled: "{{ vitam_struct.at_boot | default(service_at_boot) }}"
  notify:
    - "vitam - restart service"
  when: ( primary_site | lower == "true" ) or
        ( vitam_struct.vitam_component in vitam_secondary_site_components )

- name: ensure {{ package_name }} service is disabled and stopped
  service:
    name: "{{ package_name }}"
    enabled: false
    state: stopped
  when: ( primary_site | lower == "false" ) and
        ( vitam_struct.vitam_component not in vitam_secondary_site_components )


#### Configuration ####

- name: Check that the directories exist
  file:
    path: "{{ vitam_defaults.folder.root_path }}/{{ item }}/{{ vitam_struct.vitam_component }}"
    state: directory
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  with_items:
    - app
    - bin
    - conf
    - data
    - lib
    - log
    - script
    - tmp
    - run
  notify:
    - "vitam - restart service"

- name: Ensure that the sysconfig sub-directory exists
  file:
    path: "{{ vitam_folder_conf }}/sysconfig"
    state: directory
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  notify:
    - "vitam - restart service"

- name: Deploy common configuration files in sysconfig subdir
  template:
    src: "{{ item }}.j2"
    dest: "{{ vitam_folder_conf }}/sysconfig/{{ item }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - "java_opts"
  tags:
    - update_jvmoptions_vitam
  notify:
    - "vitam - restart service"

- name: Deploy common timer configuration files in sysconfig subdir
  template:
    src: "{{ item }}.j2"
    dest: "{{ vitam_folder_conf }}/sysconfig/{{ item }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - "timer_java_opts"
  when: ( vitam_struct.vitam_component == "functional-administration" ) or ( vitam_struct.vitam_component == "logbook" ) or ( vitam_struct.vitam_component == "storage" )
  tags:
    - update_jvmoptions_vitam

- name: Deploy common configuration files
  template:
    src: "{{ item }}.j2"
    dest: "{{ vitam_folder_conf }}/{{ item }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - "java.security"
    - "server-identity.conf"
    - "logback.xml"
    - "logback-access.xml"
    - "jetty-config.xml"
    - "vitam.conf"
  tags:
    - update_vitam_configuration
  notify:
    - "vitam - restart service"

- name: Cleanup old configuration files
  file:
    path: "{{ vitam_folder_conf }}/{{ item }}"
    state: absent
  with_items:
    - "antisamy-esapi.xml"
    - "vitam.metrics.conf"
  tags:
    - update_vitam_configuration
  notify:
    - "vitam - restart service"

- include_tasks: storage.yml
  tags: always
  when: vitam_struct.vitam_component == "storage" or vitam_struct.vitam_component == "ihm-recette"

- name: Deploy specific configuration files (can override the common configuration files)
  template:
    src: "{{ item }}"
    dest: "{{ vitam_folder_conf }}/{{ item | basename | regex_replace('\\.j2$') }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_fileglob:
    - "{{ role_path }}/templates/{{ vitam_struct.vitam_component }}/*"
  no_log: "{{ hide_passwords_during_deploy }}"
  tags:
    - update_vitam_configuration
  notify:
    - "vitam - restart service"

- name: Ensure that sub directories exists
  file:
    path: "{{ vitam_folder_conf }}/{{ item.path }}"
    state: directory
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  with_filetree: "{{ role_path }}/files/{{ vitam_struct.vitam_component }}/"
  when: item.state == 'directory'
  notify:
    - "vitam - restart service"

- name: Copy files and directories recursively
  template:
    src: '{{ item.src }}'
    dest: "{{ vitam_folder_conf }}/{{ item.path | regex_replace('\\.j2$') }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_filetree: "{{ role_path }}/files/{{ vitam_struct.vitam_component }}/"
  when: item.state == 'file'
  notify:
    - "vitam - restart service"

#### Certificates stores deployment ####

- name: "Check if {{ vitam_struct.vitam_component }} server jks keystore exists"
  stat:
    path: "{{ inventory_dir }}/keystores/server/{{ inventory_hostname }}/keystore_{{ vitam_struct.vitam_component }}.jks"
  delegate_to: localhost
  register: component_jks_keystore
  tags:
    - update_vitam_certificates

- name: "Copy {{ vitam_struct.vitam_component }} server jks keystore"
  copy:
    src: "{{ inventory_dir }}/keystores/server/{{ inventory_hostname }}/keystore_{{ vitam_struct.vitam_component }}.jks"
    dest: "{{ vitam_folder_conf }}/keystore_{{ vitam_struct.vitam_component }}.jks"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: component_jks_keystore.stat.exists
  tags:
    - update_vitam_certificates
  notify:
    - "vitam - restart service"
    - "vitam - reload consul configuration"

- name: "Check if {{ vitam_struct.vitam_component }} jks truststore exists"
  stat:
    path: "{{ inventory_dir }}/keystores/client-{{ vitam_certificate_client_type }}/truststore_{{ vitam_certificate_client_type }}.jks"
  delegate_to: localhost
  register: component_truststore
  when: vitam_certificate_client_type is defined
  tags:
    - update_vitam_certificates

- name: "Copy {{ vitam_struct.vitam_component }} jks truststore"
  copy:
    src: "{{ inventory_dir }}/keystores/client-{{ vitam_certificate_client_type }}/truststore_{{ vitam_certificate_client_type }}.jks"
    dest: "{{ vitam_folder_conf }}/truststore_{{ vitam_struct.vitam_component }}.jks"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: vitam_certificate_client_type is defined and component_truststore.stat.exists
  tags:
    - update_vitam_certificates
  notify:
    - "vitam - restart service"
    - "vitam - reload consul configuration"

- name: "Check if {{ vitam_struct.vitam_component }} jks grantedstore exists"
  stat:
    path: "{{ inventory_dir }}/keystores/client-{{ vitam_certificate_client_type }}/grantedstore_{{ vitam_certificate_client_type }}.jks"
  delegate_to: localhost
  register: component_grantedstore
  when: vitam_certificate_client_type is defined
  tags:
    - update_vitam_certificates

- name: "Copy {{ vitam_struct.vitam_component }} jks grantedstore"
  copy:
    src: "{{ inventory_dir }}/keystores/client-{{ vitam_certificate_client_type }}/grantedstore_{{ vitam_certificate_client_type }}.jks"
    dest: "{{ vitam_folder_conf }}/grantedstore_{{ vitam_struct.vitam_component }}.jks"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: vitam_certificate_client_type is defined and component_jks_keystore.stat.exists and component_grantedstore.stat.exists
  tags:
    - update_vitam_certificates
  notify:
    - "vitam - restart service"
    - "vitam - reload consul configuration"

- name: "Check if {{ vitam_struct.vitam_component }} client p12 keystore exists"
  stat:
    path: "{{ inventory_dir }}/keystores/client-{{ vitam_certificate_client_type }}/keystore_{{ vitam_struct.vitam_component }}.p12"
  delegate_to: localhost
  register: component_p12_keystore
  when: vitam_certificate_client_type is defined
  tags:
    - update_vitam_certificates

- name: "Copy {{ vitam_struct.vitam_component }} client p12 keystore"
  copy:
    src: "{{ inventory_dir }}/keystores/client-{{ vitam_certificate_client_type }}/keystore_{{ vitam_struct.vitam_component }}.p12"
    dest: "{{ vitam_folder_conf }}/keystore_{{ vitam_struct.vitam_component }}.p12"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: vitam_certificate_client_type is defined and component_p12_keystore.stat.exists
  tags:
    - update_vitam_certificates
  notify:
    - "vitam - restart service"
    - "vitam - reload consul configuration"

- name: "Check if timestamp keystore exists"
  stat:
    path: "{{ inventory_dir }}/keystores/timestamping/keystore_{{ vitam_timestamp_usage }}.p12"
  delegate_to: localhost
  register: timestamp_keystore
  when: vitam_timestamp_usage is defined
  tags:
    - update_vitam_certificates

- name: "Copy timestamp keystore"
  copy:
    src: "{{ inventory_dir }}/keystores/timestamping/keystore_{{ vitam_timestamp_usage }}.p12"
    dest: "{{ vitam_folder_conf }}/keystore_{{ vitam_timestamp_usage }}.p12"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: vitam_timestamp_usage is defined and timestamp_keystore.stat.exists
  tags:
    - update_vitam_certificates
  notify:
    - "vitam - restart service"
    - "vitam - reload consul configuration"


- import_tasks: consul.yml

- import_tasks: ihm_demo.yml

- import_tasks: selinux_contexts.yml

- meta: flush_handlers

- name: Ensure "{{ package_name }}" service is disabled and stopped on secondary site
  service:
    name: "vitam-{{ vitam_struct.vitam_component }}"
    enabled: false
    state: stopped
  when: ( primary_site | lower == "false" ) and
        ( vitam_struct.vitam_component not in vitam_secondary_site_components )

- block:

  - name: Ensure "{{ package_name }}" service is started at boot
    service:
      name: "vitam-{{ vitam_struct.vitam_component }}"
      state: started
      enabled: "{{ vitam_struct.at_boot | default(service_at_boot) }}"

  - name: Check if "{{ package_name }}" service is listening on service port (tcp check)
    wait_for:
      host: "{{ ip_service }}"
      port: "{{ vitam_struct.port_service }}"
      state: started
      timeout: "{{ vitam_defaults.services.start_timeout }}"

  - name: Check if "{{ package_name }}" service is listening on service port (http check)
    uri:
      url: "http://{{ ip_admin }}:{{ vitam_struct.port_admin }}/admin/v1/status"
    register: result
    until:
      - result.status is defined
      - result.status == 200
    retries: "{{ vitam_defaults.services.status_retries_number }}"
    delay: "{{ vitam_defaults.services.status_retries_delay }}"

  - name: Check {{ vitam_struct.vitam_component }} service health in local consul agent
    uri:
      url: "http://{{ (inventory_hostname in groups['hosts_consul_server']) | ternary(hostvars[inventory_hostname][consul.network], '127.0.0.1') }}:8500/v1/agent/health/service/name/{{ (vitam_struct.vitam_component == vitam.storageofferdefault.vitam_component) | ternary(offer_conf, vitam_struct.vitam_component) }}"
    register: result
    until:
      - result.status is defined
      - result.status == 200
    retries: "{{ vitam_defaults.services.status_retries_number }}"
    delay: "{{ vitam_defaults.services.status_retries_delay }}"

  when: ( primary_site | lower == "true" ) or
        ( vitam_struct.vitam_component in vitam_secondary_site_components )