secret : {{ plateforme_secret }}
filterActivation : {{ vitam_struct.secret_platform }}
{% if vitam_struct.vitam_component == vitam.processing.vitam_component %}
distributeurBatchSize: 800
workerBulkSize: 16
{% endif %}
{% if vitam_struct.vitam_component == vitam.metadata.vitam_component %}
storeGraphElementsPerFile: 10000
storeGraphOverlapDelay: 300
expireCacheEntriesDelay: 300
deleteIncompleteReconstructedUnitDelay: 2592000
migrationBulkSize: 10000
{% endif %}
distributionThreshold : 100000
eliminationAnalysisThreshold : 100000
eliminationActionThreshold : 10000
computedInheritedRulesThreshold : 100000000
intervalDelayCheckIdle : 5000
maxDelayUnusedConnection : 5000
delayValidationAfterInactivity : 2500
tenants:  [ "{{ vitam_tenant_ids | join('", "') }}" ]
adminTenant : {{ vitam_tenant_admin }}
forceChunkModeInputStream : {{ vitam_defaults.vitam_force_chunk_mode }}

{% if vitam_struct.vitam_component == vitam.worker.vitam_component %}
reclassificationMaxBulkThreshold: 1000
reclassificationMaxUnitsThreshold: 10000
reclassificationMaxGuildListSizeInLogbookOperation: 1000
queriesThreshold: {{ vitam.worker.queriesThreshold }}
bulkAtomicUpdateBatchSize: {{ vitam.worker.bulkAtomicUpdateBatchSize }}
bulkAtomicUpdateThreadPoolSize: {{ vitam.worker.bulkAtomicUpdateThreadPoolSize }}
bulkAtomicUpdateThreadPoolQueueSize: {{ vitam.worker.bulkAtomicUpdateThreadPoolQueueSize }}
{% endif %}

keywordMaxLength: 32766
textMaxLength: 32766

classificationLevel :
  allowList :  [{% for classification in classificationList %}{{ classification }}{% if not loop.last %},{% endif %}{% endfor %}]
  authorizeNotDefined: {{ classificationLevelOptional }}

indexInheritedRulesWithAPIV2OutputByTenant: [ "{{  vitam.worker.api_output_index_tenants | join('", "') }}" ]
indexInheritedRulesWithRulesIdByTenant: [ "{{  vitam.worker.rules_index_tenants | join('", "') }}" ]

environmentName: {{ vitam_prefix_offer|default(vitam_site_name) }}

acceptableRequestTime: {{ acceptableRequestTime|default(10) }}
criticalRequestTime: {{ criticalRequestTime|default(60) }}
requestTimeAlertThrottlingDelay: {{ requestTimeAlertThrottlingDelay|default(60) }}

# Ontology cache settings (max entries in cache & retention timeout in seconds)
ontologyCacheMaxEntries: {{ vitam.ontologyCacheMaxEntries }}

# Elasticsearch scroll timeout settings
elasticSearchScrollTimeoutInMilliseconds: {{ vitam.elasticSearchScrollTimeoutInMilliseconds }}

{% if vitam_struct.vitam_component == vitam.processing.vitam_component %}
processEngineWaitForStepTimeout: 172800
{% endif %}
